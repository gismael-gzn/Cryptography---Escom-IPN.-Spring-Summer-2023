/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2023-05-25 05:54:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import function.Me;

public final class CryptographyDrainerEncounterUnexpiredBlinkedPerfectedRepavePlywoodFrostilyMaimed_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("function.Me");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

	String saysomething = "", other = "";
	HttpSession ses = request.getSession(false);

	if(ses != null) {
		if(Me.compareCookies_Request_Session(Me.brownie, request, ses)) {
				if(Me.compareCookies_Request_Session(Me.idAuth, request, ses)) {
					Cookie newBrownie = Me.bakeBrownie(Integer.MAX_VALUE), brownie = Me.findCookie(Me.brownie, request);
					Cookie auth = Me.findCookie(Me.idAuth, request), newAuth = Me.idAuthGen(Integer.MAX_VALUE);

					saysomething = String.format("your [%s] cookie %s is now %s", brownie.getName(), brownie.getValue(), newBrownie.getValue());
					other = String.format("your [%s] cookie %s is now %s", auth.getName(), auth.getValue(), newAuth.getValue());

					brownie.setMaxAge(0);
					brownie.setValue(null);
					auth.setMaxAge(0);
					auth.setValue(null);

					response.addCookie(newBrownie);
					response.addCookie(newAuth);

					ses.setAttribute(Me.brownie, newBrownie);
					ses.setAttribute(Me.idAuth, newAuth);
				}
				else {
					System.out.println("d");
					response.sendRedirect(Me.errorHtml);
				}
		}
		else {
			System.out.println("e");
			response.sendRedirect(Me.errorHtml);
		}
	}
	else {
		System.out.println("f");
		response.sendRedirect(Me.errorHtml);
	}

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"es\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n");
      out.write("    <title>Garzon Developer - Cryptography Class</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/real.css\">\n");
      out.write("    <script src=\"js/index.js\"></script>\n");
      out.write("\n");
      out.write("    <meta http-equiv=\"cache-control\" content=\"no-cache\" />\n");
      out.write("	<meta http-equiv=\"Cache-Control\" content=\"private, no-store\" />\n");
      out.write("\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"img/apple-icon-57x57.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"img/apple-icon-60x60.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"img/apple-icon-72x72.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"img/apple-icon-76x76.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"img/apple-icon-114x114.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"img/apple-icon-120x120.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"img/apple-icon-144x144.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"img/apple-icon-152x152.png\">\n");
      out.write("    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"img/apple-icon-180x180.png\">\n");
      out.write("    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\"  href=\"img/android-icon-192x192.png\">\n");
      out.write("    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"img/favicon-32x32.png\">\n");
      out.write("    <link rel=\"icon\" type=\"image/png\" sizes=\"96x96\" href=\"img/favicon-96x96.png\">\n");
      out.write("    <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"img/favicon-16x16.png\">\n");
      out.write("    <link rel=\"manifest\" href=\"img/manifest.json\">\n");
      out.write("    <meta name=\"msapplication-TileColor\" content=\"#ffffff\">\n");
      out.write("    <meta name=\"msapplication-TileImage\" content=\"img/ms-icon-144x144.png\">\n");
      out.write("    <meta name=\"theme-color\" content=\"#ffffff\">\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body id=\"index-body\">\n");
      out.write("    \n");
      out.write("    <header id=\"home-crypto\" class=\"container\">\n");
      out.write("        <h1 id=\"Cryptography\">Cryptography</h1>        \n");
      out.write("    </header>\n");
      out.write("    \n");
      out.write("    <header class=\"contact\">\n");
      out.write("        <ul>\n");
      out.write("            <li> <img src=\"img/mail.png\" /> <a id=\"my-mail\" href=\"mailto:ggarzond1600@alumno.ipn.mx\"> ggarzond1600@alumno.ipn.mx</a> </li>\n");
      out.write("            <li> <a target=\"_blank\" href=\"https://github.com/gismael-gzn\"> <img src=\"img/GitHub_logo.png\" /> Github</a> </li>\n");
      out.write("            <li> <a target=\"_blank\" href=\"https://www.reddit.com/user/gismael\"> <img src=\"img/reddit-logo-16.png\" /> Reddit</a> </li>\n");
      out.write("            <li> <a target=\"_blank\" href=\"https://www.youtube.com/channel/UCFSb0zaA0Wl4cVwdQsYOilA\"> <img src=\"img/youtube-clipart-youtube-square-icons-1600x1600.png\" /> YouTube</a> </li>\n");
      out.write("        </ul>\n");
      out.write("    </header>\n");
      out.write("\n");
      out.write("    <nav id=\"navigation\" class=\"container\">\n");
      out.write("        <div class=\"close\"><a href=\"javascript:close_nav()\">X</a></div>\n");
      out.write("\n");
      out.write("        <details>\n");
      out.write("            <summary>Tema</summary>\n");
      out.write("            <em> <a class=\"theme-selector\" href=\"javascript:void(0)\">Day</a> </em> \n");
      out.write("            <em> <a class=\"theme-selector\" href=\"javascript:void(0)\">Night</a> </em> \n");
      out.write("        </details>\n");
      out.write("\n");
      out.write("        <details open>\n");
      out.write("            <summary>Navegar</summary>\n");
      out.write("            <ul class=\"index\">\n");
      out.write("                <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#index-body\">Inicio</a> </li>\n");
      out.write("            </ul>\n");
      out.write("        </details>\n");
      out.write("\n");
      out.write("        <details open>\n");
      out.write("            <summary>Tabla de contenidos</summary>\n");
      out.write("            <ul class=\"index\">\n");
      out.write("               <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#El-Cifrado-de-Llave-Publica\">El Cifrado de Llave P&uacute;blica</a> </li>\n");
      out.write("               <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#Mi-llave-publica\">Mi llave p&uacute;blica</a> </li>\n");
      out.write("               <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#¿Como-consegui-esta-llave?\">¿C&oacute;mo consegu&iacute; esta llave?</a> </li>\n");
      out.write("               <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#Caracteristicas-de-las-llaves-RSA\">Caracter&iacute;sticas de las llaves RSA</a> </li>\n");
      out.write("               <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#GnuPG\">GnuPG</a> </li>\n");
      out.write("               <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#Generar-llave-RSA-con-GnuPG\">Generar llave RSA con GnuPG</a> </li>\n");
      out.write("               <li> <a onclick=\"close_nav();\" class=\"index-content\" href=\"#Conclusion\">Conclusi&oacute;n</a> </li>\n");
      out.write("            </ul>\n");
      out.write("        </details>\n");
      out.write("\n");
      out.write("    </nav>\n");
      out.write("\n");
      out.write("    <main class=\"container\">\n");
      out.write("\n");
      out.write("        <div id=\"mobile-menu\" class=\"container\">\n");
      out.write("            <a class=\"btn\" href=\"javascript:open_nav()\">Men&uacute;</a>\n");
      out.write("            <a class=\"btn\" href=\"javascript:open_main()\">Navegar a</a>\n");
      out.write("         </div>\n");
      out.write("\n");
      out.write("        <div id=\"main-menu\" class=\"container\">\n");
      out.write("            <div class=\"close\"><a href=\"javascript:close_main()\">X</a></div>\n");
      out.write("           <a class=\"btn\" href=\"");
      out.print( Me.Home );
      out.write("\">Home</a>\n");
      out.write("           <a class=\"btn\" href=\"");
      out.print( Me.Cryptography );
      out.write("\">Cryptography</a>\n");
      out.write("           <a class=\"btn\" href=\"");
      out.print( Me.Curriculum );
      out.write("\">Curriculum</a>\n");
      out.write("           <a class=\"btn\" href=\"https://youtu.be/ZZ5LpwO-An4?t=3\" target=\"_blank\">woop woop</a>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <section id=\"main-content\" class=\"container\">\n");
      out.write("            \n");
      out.write("            <h2 id=\"El-Cifrado-de-Llave-Publica\" class=\"title\">El Cifrado de Llave P&uacute;blica</h2>\n");
      out.write("\n");
      out.write("            <div class=\"info\">\n");
      out.write("                <p class=\"two-cols\">\n");
      out.write("                    <img class=\"inline-img\" src=\"img/crypto-header2.png\"/>\n");
      out.write("                    El cifrado de llave p&uacute;blica fue inventado por Whitfield Diffie y Martin Hellman en 1976, y es considerado uno de los avances m&aacute;s importantes en la historia de la criptograf&iacute;a. Antes de su invenci&oacute;n, la criptograf&iacute;a se basaba principalmente en el cifrado sim&eacute;trico, donde la misma llave se utiliza tanto para cifrar como para descifrar informaci&oacute;n. El problema con este enfoque es que la llave debe ser compartida de manera segura entre las partes que se comunican, lo que puede ser un desaf&iacute;o en un entorno no seguro como Internet.\n");
      out.write("                    El cifrado de llave p&uacute;blica aborda este problema al utilizar dos claves diferentes pero matem&aacute;ticamente relacionadas: una llave p&uacute;blica y una llave privada. La llave p&uacute;blica se comparte abiertamente y se utiliza para cifrar la informaci&oacute;n, mientras que la llave privada se mantiene en secreto y se utiliza para descifrar la informaci&oacute;n. Si alguien quiere enviarte un mensaje cifrado, utiliza tu llave p&uacute;blica para cifrarlo. Una vez que el mensaje est&aacute; cifrado, solo tu llave privada puede descifrarlo.\n");
      out.write("                    Este avance en criptograf&iacute;a permiti&oacute; una comunicaci&oacute;n segura entre personas que no se conoc&iacute;an previamente ni hab&iacute;an intercambiado claves de forma segura. El algoritmo RSA, creado por Ron Rivest, Adi Shamir y Leonard Adleman en 1977, es uno de los primeros y m&aacute;s conocidos sistemas de cifrado de llave p&uacute;blica. Hoy en d&iacute;a, la criptograf&iacute;a de llave p&uacute;blica es la base para muchas aplicaciones, como la firma digital, el intercambio de claves de sesi&oacute;n en protocolos seguros (por ejemplo, TLS) y la protecci&oacute;n de datos en sistemas de almacenamiento en la nube.             \n");
      out.write("                </p>\n");
      out.write("                <h3 id=\"Mi-llave-publica\">Mi llave p&uacute;blica</h3>\n");
      out.write("\n");
      out.write("                <p>\n");
      out.write("                    A continuaci&oacute;n, encontrar&aacute;n dos enlaces para descargar mi llave RSA p&uacute;blica en diferentes formatos: uno en formato binario y otro en Base64 (ASC). Estos enlaces les permitir&aacute;n acceder a mi llave p&uacute;blica para realizar operaciones criptogr&aacute;ficas seguras. Por favor, seleccione el formato que m&aacute;s le convenga: <br/>\n");
      out.write("                    <a href=\"");
      out.print( String.format("%s?%s=%s", Me.DownloadSrv, Me.targetAttr, Me.keyBin) );
      out.write("\" class=\"download-link\"> <img class=\"ico\" src=\"img/key-icon-png-20.jpg\" /> Llave RSA p&uacute;blica en formato binario </a> <br/>\n");
      out.write("                    <b class=\"hash\">MD5: 12583e3690a3fa33ca1cb02b17308ee8</b>\n");
      out.write("                    <a href=\"");
      out.print( String.format("%s?%s=%s", Me.DownloadSrv, Me.targetAttr, Me.keyAsc) );
      out.write("\" class=\"download-link\"> <img class=\"ico\" src=\"img/key-icon-png-20.jpg\" /> Llave RSA p&uacute;blica en Base64 (ASC) </a> <br/>\n");
      out.write("                    <b class=\"hash\">MD5: 38c60996d8a76225a07d1c28c71fbd2f</b>\n");
      out.write("                </p>\n");
      out.write("\n");
      out.write("                <h3 id=\"¿Como-consegui-esta-llave?\">¿Como consegui esta llave?</h3>\n");
      out.write("                <p>\n");
      out.write("                    A continuaci&oacute;n, te mostrar&eacute; un breve tutorial sobre c&oacute;mo obtener una llave RSA usando GnuPG. Tambi&eacute;n mencionar&eacute; brevemente las caracter&iacute;sticas de la llave RSA y los n&uacute;meros relacionados con ella.\n");
      out.write("                </p>\n");
      out.write("                    \n");
      out.write("                <h3 id=\"Caracteristicas-de-las-llaves-RSA\">Caracter&iacute;sticas de las llaves RSA:</h3>\n");
      out.write("                <p>\n");
      out.write("                    Las claves RSA son un tipo de criptograf&iacute;a de llave p&uacute;blica que utiliza n&uacute;meros primos grandes y c&aacute;lculos matem&aacute;ticos complejos. El par de claves consta de una llave p&uacute;blica y una llave privada, utilizadas para cifrar y descifrar, respectivamente. La seguridad de RSA depende del tama&ntilde;o de la llave (en bits) y de la elecci&oacute;n adecuada de los n&uacute;meros primos. <br/>\n");
      out.write("                    \n");
      out.write("                    <ul>\n");
      out.write("                        <li>Basadas en la factorizaci&oacute;n de n&uacute;meros primos grandes.</li>\n");
      out.write("                        <li>Tama&ntilde;o de llave com&uacute;nmente recomendado: 2048, 3072 o 4096 bits.</li>\n");
      out.write("                        <li>La llave p&uacute;blica consta de dos n&uacute;meros: m&oacute;dulo (n) y exponente p&uacute;blico (e).</li>\n");
      out.write("                        <li>La llave privada consta de dos n&uacute;meros: m&oacute;dulo (n) y exponente privado (d).</li>  \n");
      out.write("                    </ul>\n");
      out.write("                </p>\n");
      out.write("\n");
      out.write("                <h3 id=\"GnuPG\">GnuPG</h3>\n");
      out.write("                <p class=\"two-cols\">\n");
      out.write("                    GnuPG (Gnu Privacy Guard) es una herramienta de cifrado y firma de c&oacute;digo abierto que implementa el est&aacute;ndar OpenPGP (RFC 4880). Es una alternativa libre al software original de PGP desarrollado por Phil Zimmermann. GnuPG permite cifrar, descifrar, firmar y verificar mensajes y archivos de manera segura, protegiendo la privacidad y autenticidad de la informaci&oacute;n intercambiada.\n");
      out.write("\n");
      out.write("                    GnuPG utiliza criptograf&iacute;a de llave p&uacute;blica, en la que cada usuario tiene un par de claves (p&uacute;blica y privada). La llave p&uacute;blica se utiliza para cifrar mensajes o verificar firmas, mientras que la llave privada se utiliza para descifrar mensajes o crear firmas digitales. Es fundamental mantener la llave privada en secreto, mientras que la llave p&uacute;blica se puede compartir libremente.\n");
      out.write("                    \n");
      out.write("                    GnuPG es ampliamente utilizado para asegurar el correo electr&oacute;nico, proteger archivos y software, as&iacute; como para verificar la autenticidad de las descargas y firmar documentos digitales. Es compatible con m&uacute;ltiples algoritmos criptogr&aacute;ficos, como RSA, ElGamal, DSA, ECC y otros, y es parte esencial de la infraestructura de seguridad en Internet.                    \n");
      out.write("                </p>\n");
      out.write("\n");
      out.write("                <h3 id=\"Generar-llave-RSA-con-GnuPG\">Generar llave RSA con GnuPG</h3>\n");
      out.write("                <p>\n");
      out.write("                    Para generar una llave RSA de 4096 bits con GnuPG y exportar la llave p&uacute;blica en formatos .asc (ASCII-armored) y binario, sigue estos pasos:\n");
      out.write("                    <ol>\n");
      out.write("                        <li>Una vez hayas instalado GnuPG, ejecuta el siguiente comando:</li>\n");
      out.write("                        <code> <span class=\"keyword\">gpg</span> <span class=\"string\">--full-generate-key</span> </code>\n");
      out.write("                        \n");
      out.write("                        <li>Introduce los datos que el asistente solicita, entre ellos: tama&ntilde;o de llave deseado (2048, 3072 o 4096 bits), el per&iacute;odo de validez de la llave, informaci&oacute;n de usuario (nombre y correo electr&oacute;nico) y una contrase&ntilde;a segura para proteger la llave privada. <br/>\n");
      out.write("                        Al final obtend&aacute;s una salida similar a esta:\n");
      out.write("                        </li>\n");
      out.write("\n");
      out.write("                        <code><span class=\"string\">pub   rsa4096 2023-04-13 [SC]\n");
      out.write("    170094919850P738A8DF2EEDCDE9K112D5040963A\n");
      out.write("uid Gerardo Ismael Garzon Dominguez &lt;ggarzond1600@alumno.ipn.mx&gt;\n");
      out.write("sub rsa4096 2023-04-13 [E]</span></code>\n");
      out.write("\n");
      out.write("                        <li>Exportar llave p&uacute;blica en formato .gpg (Binario):</li>\n");
      out.write("                        <code> <span class=\"keyword\">gpg</span> <span class=\"string\">--armor --export</span> <span class=\"argument\">&lt;key_id&gt;</span> <span class=\"string\">public_key.asc</span></code>\n");
      out.write("\n");
      out.write("                        <li>Exportar llave p&uacute;blica en formato binario:</li>\n");
      out.write("                        <code> <span class=\"keyword\">gpg</span> <span class=\"string\">--export</span> <span class=\"argument\">&lt;key_id&gt;</span> <span class=\"string\">public_key.gpg</span></code>\n");
      out.write("\n");
      out.write("                    </ol>\n");
      out.write("                </p>\n");
      out.write("\n");
      out.write("                <h3 id=\"Conclusion\">Conclusi&oacute;n</h3>\n");
      out.write("                <p>\n");
      out.write("                    En este art&iacute;culo aprendimos a generar claves RSA utilizando GnuPG y a manejarlas en diferentes formatos, como archivos .asc y binarios. Tambi&eacute;n discutimos c&oacute;mo exportar claves p&uacute;blicas. Las claves generadas se pueden utilizar para cifrar y descifrar mensajes, firmar y verificar la autenticidad de documentos o comunicaciones, y garantizar la privacidad y seguridad de la informaci&oacute;n compartida en l&iacute;nea.                    \n");
      out.write("                </p>\n");
      out.write("\n");
      out.write("            </div>\n");
      out.write("        </section>\n");
      out.write("    </main>\n");
      out.write("\n");
      out.write("    <footer class=\"container\">\n");
      out.write("        <p>Footer: all rights reserved to Gerardo Ismael Garzon Dominguez</p>\n");
      out.write("    </footer>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
